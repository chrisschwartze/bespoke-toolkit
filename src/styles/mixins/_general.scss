/*
** Mixins - Container
** -----------------------------------------------------------------------------*/

/*
** Manages responsive breakpoints
**
** @param {String} $label - Breakpoint label
** @require {Variable} $breakpoints
**/
@mixin breakpoint($label) {
  $breakpoint: map-get($breakpoints, $label);

  @if $breakpoint {
    @media (min-width: map-get($breakpoint, 'min-width')) {
      @content;
    }
  }

  @else {
    @error "Unfortunately, no value could be retrieved from `#{$label}`. "
    + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/*
** Generates gradient stops for visual grid helper
**
** @param {Number} $columns - Columns count
** @param {String} $gutter - Grid gutter width
** @param {String} $color - Visual grid color (optional)
**/
@function grid-gradient-stops($columns, $gutter, $color: '#eee') {
  $column-width: percentage(1 / $columns);
  $gutter: ($gutter / 2);
  $values: (transparent calc(#{$gutter}), $color calc(#{$gutter}));

  @for $i from 1 to ($columns + 1) {
    $values: append($values, $color calc(#{($column-width * $i)} - #{$gutter}), comma);
    $values: append($values, transparent calc(#{($column-width * $i)} - #{$gutter}), comma);

    $values: append($values, transparent calc(#{($column-width * $i)} + #{$gutter}), comma);
    $values: append($values, $color calc(#{($column-width * $i)} + #{$gutter}), comma);
  }

  @return $values;
}
