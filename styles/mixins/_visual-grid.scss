//
// Mixins - Visual grid
// -----------------------------------------------------------------------------

/// Generate grid row
///
/// @param {String}     $breakpoint - Breakpoint name
/// @param {Map}        $opts - Map containing breakpoint options
/// @require {Variable} $visual-grid-color
/// @require {Variable} $grid-container-gutter

@mixin visual-grid-gradient($breakpoint, $opts) {
  $gutter: map-get($opts, 'gutter');
  $columns: map-get($opts, 'columns');
  $gradient-stops: visual-grid-stops($columns, $gutter, $visual-grid-color);

  right: $grid-container-gutter - ($gutter / 2);
  left: $grid-container-gutter - ($gutter / 2);
  background-image: linear-gradient(to right, #{$gradient-stops});
}

/// Generates gradient stops for visual grid helper
///
/// @param {Number} $columns - Columns count
/// @param {String} $gutter - Grid gutter width
/// @param {String} $color - Visual grid color (optional)

@function visual-grid-stops($columns, $gutter, $color) {
  $gutter: ($gutter / 2);
  $values: (transparent $gutter, $color $gutter);
  $column-width: percentage(1 / $columns);

  @for $i from 1 to ($columns + 1) {
    $values: append($values, $color calc(#{($column-width * $i)} - #{$gutter}), comma);
    $values: append($values, transparent calc(#{($column-width * $i)} - #{$gutter}), comma);

    @if ($i < $columns) {
      $values: append($values, transparent calc(#{($column-width * $i)} + #{$gutter}), comma);
      $values: append($values, $color calc(#{($column-width * $i)} + #{$gutter}), comma);
    }
  }

  @return $values;
}
